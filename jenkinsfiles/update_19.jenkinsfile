pipeline {
    agent { node { label 'slave' } }
    stages {
        stage('Git_Clone') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'some_randome', usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                    script {
                        env.encodedPass=URLEncoder.encode(PASS, "UTF-8")
                    }
                    sh 'if [ -d phpserver ]; then rm -R phpserver; fi && git clone -b main --single-branch https://${USER}:${encodedPass}@github.com/BB8312/phpserver.git'
                }
            }
        }
        stage('Delete_18') {
            steps {
                sh 'cd phpserver/manifests && kubectl delete -f in_stab_v18.1.yaml && while [ `kubectl get pods | grep phpwebserver | wc -l` -eq 1 ]; do sleep 2; done'
                }
            }
        stage('Backup_FS') {
            steps {
                sh 'cd phpserver/manifests && kubectl apply -f backup_fs.yaml || : && while [ `kubectl get pods | grep before-upgrade | wc -l` -eq 1 ]; do sleep 2; done'
                }
            }
        stage('Upgrade_19') {
            steps {
                sh 'cd phpserver/manifests && kubectl apply -f up_stab_v19.1.yaml && while ! [ `curl http://php.k8s-3.sa/testlink/login.php | grep Login.php | wc -l` -eq 1 ]; do sleep 2; done'
                }
            }
    }
}
